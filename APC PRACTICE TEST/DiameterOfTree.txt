/*

The diameter of a tree (sometimes called the width) is the number of nodes on the longest path between two end nodes.

*/


#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <limits.h>
#include <stdbool.h>

typedef struct Node {
    int data;
    int x;
    struct Node* left;
    struct Node* right;
}Node;

Node* newNode(int data,int x)
{
    Node* n=(Node*)malloc(sizeof(Node));
    n->data=data;
    n->x=x;
    n->left=NULL;
    n->right=NULL;
    return n;
}

Node* bst(Node* root,int data,int x)
{
    if(root==NULL)
    {
        return newNode(data,x);
    }
    if(data<root->data)
    {
        root->left=bst(root->left,data,x-1);
    }
    else if(data>root->data)
    {
        root->right=bst(root->right,data,x+1);
    }
    return root;
}

int max(int i,int j)
{
    return (i>j)?i:j;
}

int height(Node* root)
{
    if(!root)
    return 0;
    return (1+max(height(root->left),height(root->right)));
}

int diameterOfTree(Node* root)
{
    if(root==NULL)
    return 0;
    return 1+height(root->left)+height(root->right);
}

int main() {
    int n,num,x=0;
    scanf("%d",&n);
    struct Node* root=NULL;
    for(int i=0;i<n;i++)
    {
        scanf("%d",&num);
        root=bst(root,num,x);
    }
    printf("%d",diameterOfTree(root));
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
    return 0;
}