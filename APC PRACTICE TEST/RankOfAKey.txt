//java

/*   ------------

Rank of a key k in a binary search tree is total number of keys lesser than k (-1 if key is not found). You have to implements 2 method in provided BST1. Put a key in BST2. get the Rank of a keyInput format:number of insertionkeys to be insertednumber of keys for which rank has to be returnedkeys
input :
8
5 2 1 3 4 7 6 8
3
5 1 9
output:
4
0
-1

-------------- */


import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class BST {
     private Node root;
        
        private class Node {
            
            private final Integer key;
            private Node right;
            private Node left;
            private int N;
            
            public Node(Integer key) {
                this.key = key;
                N = 1;
            }
        }
        public boolean isEmpty() {
            return size() == 0;
        }
        
        public int size() {
            return sizeOf(root);
        }
        
        private int sizeOf(Node x) {
            return x == null ? 0 : x.N;
        }
    
        public Integer get(int key) {
            Node x = get(root, key);
            return x == null ? null : x.key;
        }
        
        private Node get(Node x, Integer key) {
            if (x == null) {
                return null;
            }
            int cmp = key.compareTo(x.key);
            if (cmp == 0) {
                return x;
            }
            if (cmp < 0) {
                return get(x.left, key);
            }
            return get(x.right, key);
        }
    
    
    
/*
 * Complete the function below.
 */

    public Node insertNodes(Node n,int key)
    {
        if(n==null)
            return new Node(key);
        if(n.key>key)
            n.left=insertNodes(n.left, key);
        else if(n.key<key)
            n.right=insertNodes(n.right,key);
        
        n.N=1+sizeOf(n.left)+sizeOf(n.right);
        return n;
    }

    public void insert(int key) {
        root=insertNodes(root,key);

    }
    int x;
    public Integer getRankOfKey(Node root,int key)
    {
        if(root==null)
        return -1;
        if(root.key==key)
        return sizeOf(root.left);
        if(root.key>key)
        return getRankOfKey(root.left, key);
        else{
        x=getRankOfKey(root.right, key);
        if(x==-1)
        return -1;
        else
        return (1+sizeOf(root.left)+x);
        }
    }

    public Integer getRank(int key){
        int rank=getRankOfKey(root,key);
        return rank;
    } 
    public static void main(String[] args){
        Scanner in = new Scanner(System.in);
        BST bst = new BST();
        int n = in.nextInt();
        for(int i = 0 ; i < n ; i++){
            bst.insert(in.nextInt());
        }
        int m = in.nextInt();
        for(int i = 0 ; i < m ; i++){
            System.out.println(bst.getRank(in.nextInt()));
        }
    }
}