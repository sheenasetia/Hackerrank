#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <limits.h>
#include <stdbool.h>

typedef struct Node
{
    int data;
    struct Node* left;
    struct Node* right;
}Node;

int find(int n,int* inord,int s, int l)
{
    for(int i=s;i<=l;i++)
    {
        if(inord[i]==n)
        return i;
    }
    return 0;
}
Node* traverse(int* pre,int* inord,int a,int b,int* id)
{
    if(a>b)
    return NULL;
    
    int index=find(pre[(*id)++],inord,a,b);
    Node* newnode=(Node*)malloc(sizeof(Node));
    newnode->data=inord[index];
    newnode->left=traverse(pre,inord,a,(index-1),id);
    newnode->right=traverse(pre,inord, index+1,b,id);
    return newnode;
}

Node* bst(int* pre,int* inord, int n)
{
    int i=0;
    Node* res=traverse(pre,inord,0,n-1,&i);
    return res;
}

void postorderTraversal(Node* root)
{
    if(!root)
    return;
    postorderTraversal(root->left);
    postorderTraversal(root->right);
    printf("%d ",root->data);
}

int main() {
    int n;
    scanf("%d",&n);
    int pre[n],inord[n];
    for(int i=0;i<n;i++)
    scanf("%d",&pre[i]);
    for(int i=0;i<n;i++)
    scanf("%d",&inord[i]);

    Node* root=bst(pre,inord,n);
    postorderTraversal(root);
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
    return 0;
}