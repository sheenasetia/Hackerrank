#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <limits.h>
#include <stdbool.h>

typedef struct Node {
    int data;
    int x;
    struct Node* left;
    struct Node* right;
}Node;

Node* newNode(int data,int x)
{
    Node* n=(Node*)malloc(sizeof(Node));
    n->data=data;
    n->x=x;
    n->left=NULL;
    n->right=NULL;
    return n;
}

Node* bst(Node* root,int data,int x)
{
    if(root==NULL)
    {
        return newNode(data,x);
    }
    if(data<root->data)
    {
        root->left=bst(root->left,data,x-1);
    }
    else if(data>root->data)
    {
        root->right=bst(root->right,data,x+1);
    }
    return root;
}

typedef struct Queue {
    Node* d;
    struct Queue* next;
}Queue;

Queue* front=NULL;
Queue* rear=NULL;

void push(Node* n)
{
    Queue* newnode=(Queue*)malloc(sizeof(Queue));
    newnode->d=n;
    newnode->next=NULL;
    if(rear==NULL)
    {
        front=newnode;
        rear=newnode;
    }
    else
    {
        rear->next=newnode;
        rear=newnode;
    }
}

Node* pop()
{
    Node* n=front->d;
    if(rear==front)
    {
        rear=NULL;
        front=NULL;
    }
    else
    {
        front=front->next;
    }
    return n;
}


void bottomView(Node* root)
{
    int res[100]={0},left=50,right=50;
    push(root);
    while(rear!=NULL)
    {
        Node* n=pop();
        res[50+(n->x)]=n->data;
        
        if(50+(n->x)<left)
        left=50+(n->x);

        if(50+(n->x)>right)
        right=50+(n->x);

        if(n->left)
            push(n->left);
        if(n->right)
            push(n->right);
    }

    for(int i=left;i<=right;i++)
    {
        if(res[i]!=0)
        {
            printf("%d ",res[i]);
        }
    }
}


int main() {
    int n;
    scanf("%d",&n);
    struct Node* root=NULL;
    int x=0,num;
    for(int i=0;i<n;i++) {
        scanf("%d",&num);
        root=bst(root,num,x);
    }
    bottomView(root);
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
    return 0;
}